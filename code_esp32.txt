#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebServer.h>
#include <Preferences.h>
#include <HTTPClient.h>
#include "DHT.h"

// Định nghĩa OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Định nghĩa cảm biến
#define LIGHT_SENSOR_PIN 32    // GL5516
#define SMOKE_SENSOR_PIN 33    // MQ2
#define DHTPIN 25              // DHT11
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
#define BUZZER_PIN 26   // Chân kết nối còi

Preferences preferences;
WebServer server(80);

String readLight() {
  int lightValue = digitalRead(LIGHT_SENSOR_PIN);
  return (lightValue == 0) ? "Bright" : "Dark";
}

// Đọc khói
String readSmoke() {
  int smokeValue = digitalRead(SMOKE_SENSOR_PIN);
  return (smokeValue == 1) ? "Clean" : "Smoke!";
}

// Đọc nhiệt độ
float readTemperature() {
  return dht.readTemperature();
}

// Đọc độ ẩm
float readHumidity() {
  return dht.readHumidity();
}
// -----------------------------
// Hàm hiển thị lên màn OLED
// -----------------------------
void displayMessage(String msg) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.println(msg);
  display.display();
}

// -----------------------------
// Các hàm WebServer
// -----------------------------
void handleRoot() {
  String html = "<html><body>"
                "<h2>Configure WiFi for ESP32</h2>"
                "<form action='/save' method='POST'>"
                "SSID: <input type='text' name='ssid'><br>"
                "Password: <input type='password' name='pass'><br><br>"
                "<input type='submit' value='Save WiFi'>"
                "</form></body></html>";

  server.send(200, "text/html", html);
}

void handleSave() {
  String ssid = server.arg("ssid");
  String pass = server.arg("pass");

  if (ssid.length() > 0 && pass.length() > 0) {
    preferences.begin("wifi", false);
    preferences.putString("ssid", ssid);
    preferences.putString("pass", pass);
    preferences.end();

    server.send(200, "text/html", "<h1>WiFi saved, reboot ESP!</h1>");
    delay(2000);
    ESP.restart();
  } else {
    server.send(400, "text/html", "<h1>Please enter complete information!</h1>");
  }
}

// -----------------------------
// Start WebServer
// -----------------------------
void startWebServer() {
  WiFi.softAP("ESP32_Setup");
  Serial.println("WiFi AP has started!");
  displayMessage("Setup WiFi AP");
  
  server.on("/", handleRoot);
  server.on("/save", handleSave);
  server.begin();
}

// -----------------------------
// Setup
// -----------------------------
void setup() {
  Serial.begin(115200);

  // Khởi tạo OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay(); //set up LCD

  dht.begin();                        //set up dht11
  pinMode(LIGHT_SENSOR_PIN, INPUT);   //set up cam bien anh sang
  pinMode(SMOKE_SENSOR_PIN, INPUT);   //set up mq2
  pinMode(BUZZER_PIN, OUTPUT);        //set up Buzzer
  digitalWrite(BUZZER_PIN, LOW);      // Tắt còi ban đầu

  preferences.begin("wifi", false);
  
  String ssid = preferences.getString("ssid", "");
  String pass = preferences.getString("pass", "");

  if (ssid != "") {
    Serial.println("Connecting to WiFi...");
    displayMessage("Connecting WiFi...");

    WiFi.begin(ssid.c_str(), pass.c_str());

    int timeout = 10; 
    while (WiFi.status() != WL_CONNECTED && timeout > 0) {
      delay(1000);
      Serial.print(".");
      timeout--;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nConnection successful!");
      Serial.println(WiFi.localIP());
      
      // Hiện IP lên màn hình
      display.clearDisplay();
      display.setTextSize(1);
      display.setCursor(0, 0);
      display.print("Connected!");
      display.setCursor(0, 16);
      display.print(WiFi.localIP());
      display.display();
      return;
    }
  }

  // Nếu kết nối thất bại
  startWebServer();
}

// -----------------------------
// Gửi dữ liệu sensor
// -----------------------------
void sendSensorData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String serverUrl = "http://192.168.32.44:8081/sensor";

    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    String json = "{";
    json += "\"device_id\":\"esp32_001\",";
    json += "\"temperature\":25.6,";
    json += "\"humidity\":60.3";
    json += "}";

    int httpResponseCode = http.POST(json);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Response code: " + String(httpResponseCode));
      Serial.println("Response: " + response);
      displayMessage("Data sent OK");
    } else {
      Serial.println("POST failed, error: " + http.errorToString(httpResponseCode));
      displayMessage("Send Error!");
    }

    http.end();
  } else {
    Serial.println("WiFi not connected!");
    displayMessage("WiFi Lost!");
  }
}

//unsigned long lastSend = 0;

void displayScreen() {
  // Đọc cảm biến
  String lightStatus = readLight();
  String smokeStatus = readSmoke();
  float humidity = readHumidity();
  float temperature = readTemperature();

// Kiểm tra có khói hay không để bật/tắt còi
  if (smokeStatus == "Smoke!") {
    digitalWrite(BUZZER_PIN, HIGH); // Bật còi
  } else {
    digitalWrite(BUZZER_PIN, LOW);  // Tắt còi
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  // Hiển thị IP
  display.print("IP: ");
  display.println(WiFi.localIP());

  // Hiển thị cảm biến
  display.print("Light: ");
  display.println(lightStatus);

  display.print("Smoke: ");
  display.println(smokeStatus);

  display.print("T:");
  display.print(temperature);
  display.print((char)247); // kí tự độ C
  display.print("C H:");
  display.print(humidity);
  display.println("%");

  display.display();
}



void loop() {
  server.handleClient();

  displayScreen();

  delay(1000);
  /*
  if (WiFi.status() == WL_CONNECTED && millis() - lastSend > 10000) {
    sendSensorData();
    lastSend = millis();
  }
  */
}
